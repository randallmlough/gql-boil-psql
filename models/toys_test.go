// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testToys(t *testing.T) {
	t.Parallel()

	query := Toys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testToysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testToysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Toys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testToysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ToySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testToysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ToyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Toy exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ToyExists to return true, but got false.")
	}
}

func testToysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	toyFound, err := FindToy(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if toyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testToysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Toys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testToysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Toys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testToysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	toyOne := &Toy{}
	toyTwo := &Toy{}
	if err = randomize.Struct(seed, toyOne, toyDBTypes, false, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}
	if err = randomize.Struct(seed, toyTwo, toyDBTypes, false, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = toyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = toyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Toys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testToysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	toyOne := &Toy{}
	toyTwo := &Toy{}
	if err = randomize.Struct(seed, toyOne, toyDBTypes, false, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}
	if err = randomize.Struct(seed, toyTwo, toyDBTypes, false, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = toyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = toyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func toyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func toyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Toy) error {
	*o = Toy{}
	return nil
}

func testToysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Toy{}
	o := &Toy{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, toyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Toy object: %s", err)
	}

	AddToyHook(boil.BeforeInsertHook, toyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	toyBeforeInsertHooks = []ToyHook{}

	AddToyHook(boil.AfterInsertHook, toyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	toyAfterInsertHooks = []ToyHook{}

	AddToyHook(boil.AfterSelectHook, toyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	toyAfterSelectHooks = []ToyHook{}

	AddToyHook(boil.BeforeUpdateHook, toyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	toyBeforeUpdateHooks = []ToyHook{}

	AddToyHook(boil.AfterUpdateHook, toyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	toyAfterUpdateHooks = []ToyHook{}

	AddToyHook(boil.BeforeDeleteHook, toyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	toyBeforeDeleteHooks = []ToyHook{}

	AddToyHook(boil.AfterDeleteHook, toyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	toyAfterDeleteHooks = []ToyHook{}

	AddToyHook(boil.BeforeUpsertHook, toyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	toyBeforeUpsertHooks = []ToyHook{}

	AddToyHook(boil.AfterUpsertHook, toyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	toyAfterUpsertHooks = []ToyHook{}
}

func testToysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testToysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(toyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testToyToOnePetUsingPet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Toy
	var foreign Pet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, petDBTypes, false, petColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PetID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Pet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ToySlice{&local}
	if err = local.L.LoadPet(ctx, tx, false, (*[]*Toy)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Pet = nil
	if err = local.L.LoadPet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Pet == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testToyToOneSetOpPetUsingPet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Toy
	var b, c Pet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, toyDBTypes, false, strmangle.SetComplement(toyPrimaryKeyColumns, toyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, petDBTypes, false, strmangle.SetComplement(petPrimaryKeyColumns, petColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, petDBTypes, false, strmangle.SetComplement(petPrimaryKeyColumns, petColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Pet{&b, &c} {
		err = a.SetPet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Pet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Toys[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PetID, x.ID) {
			t.Error("foreign key was wrong value", a.PetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PetID))
		reflect.Indirect(reflect.ValueOf(&a.PetID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PetID, x.ID) {
			t.Error("foreign key was wrong value", a.PetID, x.ID)
		}
	}
}

func testToyToOneRemoveOpPetUsingPet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Toy
	var b Pet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, toyDBTypes, false, strmangle.SetComplement(toyPrimaryKeyColumns, toyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, petDBTypes, false, strmangle.SetComplement(petPrimaryKeyColumns, petColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPet(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePet(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Pet().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Pet != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PetID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Toys) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testToysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testToysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ToySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testToysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Toys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	toyDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Description`: `character varying`, `Color`: `character varying`, `PetID`: `integer`}
	_          = bytes.MinRead
)

func testToysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(toyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(toyAllColumns) == len(toyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, toyDBTypes, true, toyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testToysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(toyAllColumns) == len(toyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Toy{}
	if err = randomize.Struct(seed, o, toyDBTypes, true, toyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, toyDBTypes, true, toyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(toyAllColumns, toyPrimaryKeyColumns) {
		fields = toyAllColumns
	} else {
		fields = strmangle.SetComplement(
			toyAllColumns,
			toyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ToySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testToysUpsert(t *testing.T) {
	t.Parallel()

	if len(toyAllColumns) == len(toyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Toy{}
	if err = randomize.Struct(seed, &o, toyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Toy: %s", err)
	}

	count, err := Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, toyDBTypes, false, toyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Toy struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Toy: %s", err)
	}

	count, err = Toys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
